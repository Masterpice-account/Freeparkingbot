import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7730856052:AAEESnS64VLnUZ3ckE4r4oE8gRohf3FUV6A"
GOOGLE_SHEETS_KEY = "https://docs.google.com/spreadsheets/d/1NtkB8lz_Aqs7f9dvglbpX_OBtXZMV9yIm5Ue3tninUs/edit?usp=sharing"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(GOOGLE_SHEETS_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ö–Ω–æ–ø–∫–∏ —Ä–∞–π–æ–Ω–æ–≤
DISTRICTS = ["–¶–ê–û", "–°–ê–û", "–°–í–ê–û", "–í–ê–û", "–Æ–í–ê–û", "–Æ–ê–û", "–Æ–ó–ê–û", "–ó–ê–û", "–°–ó–ê–û"]

def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –ú–æ—Å–∫–≤—ã —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?",
        reply_markup=district_buttons()
    )

def district_buttons():
    buttons = [[InlineKeyboardButton(d, callback_data=d)] for d in DISTRICTS]
    return InlineKeyboardMarkup(buttons)

def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data

    if data in DISTRICTS:
        context.user_data['district'] = data
        query.edit_message_text(text=f"–¢—ã –≤—ã–±—Ä–∞–ª {data}. –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∫–æ–≤–æ–∫ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å?",
                               reply_markup=action_buttons())
    elif data == "get_list":
        send_parking_list(update, context)
    elif data == "add_address":
        context.bot.send_message(chat_id=query.message.chat_id, 
                                text="–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –ø–∞—Ä–∫–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –£–ª–∏—Ü–∞ –¢–≤–µ—Ä—Å–∫–∞—è, 10):")
        return "wait_address"
    elif data == "cancel":
        query.edit_message_text(text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return -1

def action_buttons():
    buttons = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∫–æ–≤–æ–∫", callback_data="get_list")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø–∞—Ä–∫–æ–≤–∫–∏", callback_data="add_address")]
    ]
    return InlineKeyboardMarkup(buttons)

def send_parking_list(update: Update, context: CallbackContext):
    district = context.user_data['district']
    worksheet = sheet.worksheet('–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ')
    records = worksheet.get_all_records()
    addresses = [f"üìç {row['–ê–¥—Ä–µ—Å']}" for row in records if row['–†–∞–π–æ–Ω'] == district]
    
    if addresses:
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, 
                                text=f"–°–ø–∏—Å–æ–∫ –ø–∞—Ä–∫–æ–≤–æ–∫ –≤ {district}:\n\n" + "\n".join(addresses))
    else:
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, 
                                text="–í —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤–æ–∫ üò¢")

def save_address(update: Update, context: CallbackContext):
    address = update.message.text
    district = context.user_data['district']
    worksheet = sheet.worksheet('–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ')
    worksheet.append_row([district, address, "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"])
    
    update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º ‚úÖ")
    return -1

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(button_click))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, save_address), group=1)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
